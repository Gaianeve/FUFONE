# -*- coding: utf-8 -*-
"""Agent_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Gaianeve/FUFONE/blob/main/PPO/Agent_class.ipynb

# Agent class
Basically the actor-critic NN
"""

# importing libraries
import os
import numpy as np
import torch
import torch.nn as nn
from torch.distributions.categorical import Categorical
from torchsummary import summary
import gym
from datetime import datetime

# init layer
def layer_init(layer, std=np.sqrt(2), bias_const=0.0):
  torch.nn.init.orthogonal_(layer.weight, std)
  torch.nn.init.constant_(layer.bias, bias_const)
  return layer

#getting cute unique name for checkpoint
def get_checkpoint_name(epoch_v):
  now = datetime.now()
  today = now.strftime("%Y_%m_%d_%H_%M_%S")
  check_name = 'checkpoint' + '_' + str(epoch_v) + '_' + today
  return check_name

# agent class
class Agent(nn.Module):
  def __init__(self, envs):
      super(Agent, self).__init__()
      self.critic = nn.Sequential(
          layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
          nn.Tanh(),
          layer_init(nn.Linear(64, 64)),
          nn.Tanh(),
          layer_init(nn.Linear(64, 1), std=1.0),
      )
      self.actor = nn.Sequential(
          layer_init(nn.Linear(np.array(envs.single_observation_space.shape).prod(), 64)),
          nn.Tanh(),
          layer_init(nn.Linear(64, 64)),
          nn.Tanh(),
          layer_init(nn.Linear(64, envs.single_action_space.n), std=0.01),
      )

  def get_value(self, x):
      return self.critic(x)

  def get_action_and_value(self, x, action=None):
      logits = self.actor(x)
      probs = Categorical(logits=logits)
      print('showing probs')
      print(probs)
      if action is None:
          action = probs.sample()
      return action, probs.log_prob(action), probs.entropy(), self.critic(x)

  # NN summary
  def print_summary(self, envs):
    print('Actor summary')
    print(summary(self.actor, envs.single_observation_space.shape))
    print('Critic summary')
    print(summary(self.critic, envs.single_observation_space.shape))

  def get_parameters(self):
    #useful if wanting to check the updating of NN parameters
    for name, param in self.named_parameters():
      print(name, param.data)

  # checkpoints
  def save_checkpoint(self, epoch_v):
    checkpoint_name = get_checkpoint_name(epoch_v)
    directory = os.getcwd() + '/' + 'checkpoints/'
    #if it doesn't exists, then create it
    if not os.path.exists(directory):
      os.mkdir(directory)
      print('Dear human, checkpoint directory did not existed. I created it for you ')
    path = directory + checkpoint_name
    print("=> saving checkpoint '{}'".format(path))
    torch.save(self, path)

  def resume_from_checkpoint(self, path):
    print("=> loading checkpoint '{}'".format(path))
    return torch.load(path)

  def save_agent(self, file_name):
    directory = os.getcwd() + '/' + 'models/'
    #if it doesn't exists, then create it
    if not os.path.exists(directory):
      os.mkdir(directory)
      print('Dear human, saved model directory did not existed. I created it for you ')
    path = directory + file_name
    print("=> saving model as best agent in '{}'".format(path))
    torch.save(self, path)

  def load_agent(self,path):
     print("=> loading model from '{}'".format(path))
     return torch.load(path)



